<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_winning</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

option = 0
max_option = 1

_x[0] = 150
_x[1] = 450

_y[0] = 200
_y[1] = 200 + 30
_y[2] = 200 + 60
_y[3] = 200 + 90

txt[0] = "Total Time: "
txt[1] = "Restarts: "
txt[2] = "Best Time on a level: "
txt[3] = "Secrets found: "


_y_tit[0] = 200 - 60
_y_tit[1] = 200 - 30

opt_txt[0] = "Main Menu"
opt_txt[1] = "Quit"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing everything

draw_self()

//draw text
draw_set_font(fn_titlescreen)
draw_set_valign(fa_middle)


//Draw the array of text
var i
i = 0

while (i &lt;= 3) {
    draw_text(_x[0],_y[i],txt[i])
    i += 1
}

//draw how many restarts happened
draw_text(_x[1],_y[1],string(global.restarts))


//Print the best time
if (global.best_time_s &lt; 10) and (global.best_time_m &lt; 10){
    draw_text(_x[1],_y[2],string(global.best_time_m) + ":0" + string(global.best_time_s))
}
else if (global.best_time_s &gt;= 10) and (global.best_time_m &gt;= 10){
    draw_text(_x[1],_y[2],string(global.best_time_m) + ":" + string(global.best_time_s))
}
else if (global.best_time_s &gt;= 10) and (global.best_time_m &lt; 10){
    draw_text(_x[1],_y[2],string(global.best_time_m) + ":" + string(global.best_time_s))
}
else if (global.best_time_s &lt; 10) and (global.best_time_m &gt;= 10){
    draw_text(_x[1],_y[2],string(global.best_time_m) + "0:" + string(global.best_time_s))
}

//Draw the total time 
    if (global.t_time_s &lt; 10) and (global.t_time_m &lt; 10){
        draw_text(_x[1],_y[0],string(global.t_time_m) + ":0" + string(global.t_time_s))
    }
    else if (global.t_time_s &gt;= 10) and (global.t_time_m &gt;= 10){
        draw_text(_x[1],_y[0],string(global.t_time_m) + ":" + string(global.t_time_s))
    }
    else if (global.t_time_s &gt;= 10) and (global.t_time_m &lt; 10){
        draw_text(_x[1],_y[0],string(global.t_time_m) + ":" + string(global.t_time_s))
    }
    else if (global.t_time_s &lt; 10) and (global.t_time_m &gt;= 10){
        draw_text(_x[1],_y[0],string(global.t_time_m) + "0:" + string(global.t_time_s))
    }
    
//Draw how many secrets were found
draw_text(_x[1],_y[3],string(global.secrets) + "/10")



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
