<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//speeds
move_speed = 2.5;
jump_speed = 10;
hsp = 0;
vsp = 0;
grav = 0.4;

//jumps
wall_jump = 0;
orig_jumps = 0;
jumps = 0;
pow_jump = 1

//always be infront
depth = -10

//no animations
image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement code
        //Start the timer
        global.count_up = true

//Player Input
key_right = keyboard_check(vk_right)
key_left = -keyboard_check(vk_left)
key_jump = keyboard_check_pressed(vk_up)

                        //Restarting and changing levels
//Restart if you hit R
if keyboard_check_pressed(ord("R")){
    // Add one to the total amount of restarts then restart the room   
    global.restarts += 1
    room_restart()
} 

//Go to main menu
if keyboard_check(vk_escape){room_goto(title_titlescreen)}
                    
//React to inputs
move = key_left + key_right
hsp = move * move_speed

//Gravity
if (vsp &lt; 10) {vsp += grav}

                        //Jumping
                    //Jumping on the ground
                        
//Jumping if you are green on green
if (place_meeting(x,y+1,ob_wall_green) and (image_index == 0)){
    vsp = key_jump * -jump_speed * pow_jump
    wall_jump = jumps
}

//Jumping if you are white on white
else if (place_meeting(x,y+1,ob_wall_white) and (image_index == 1)){
    vsp = key_jump * -jump_speed * pow_jump
    wall_jump = jumps
}


//Jumping if you are blue on blue
else if (place_meeting(x,y+1,ob_wall_blue) and (image_index == 2)){
    vsp = key_jump * -jump_speed * pow_jump
    wall_jump = jumps
}

//Jumping on purple
else if (place_meeting(x,y+1,ob_wall_purple)){
    vsp = key_jump * -jump_speed * pow_jump
    wall_jump = jumps
}




                    //Wall jumping
                    
//if you are pressing the jump key and have jumps
if (key_jump == 1 and wall_jump &gt; 0){

    //Wall jumping if you are green off of green walls
    if ((place_meeting(x+1,y,ob_wall_green))or (place_meeting(x-1,y,ob_wall_green)) and image_index == 0){
        vsp = key_jump * -jump_speed * pow_jump
        wall_jump -=1
    }
    
    //Wall jumping if you are white jumping off of white walls
    else if ((place_meeting(x+1,y,ob_wall_white))or (place_meeting(x-1,y,ob_wall_white)) and image_index == 1){
        vsp = key_jump * -jump_speed * pow_jump
        wall_jump -=1
    }
    
    //Wall jumping if you are blue and jumping off of blue walls
    else if ((place_meeting(x+1,y,ob_wall_blue))or (place_meeting(x-1,y,ob_wall_blue)) and image_index == 2){
        vsp = key_jump * -jump_speed * pow_jump
        wall_jump -=1
    }
    
    //Wall jumping off of purple as any colour
    else if ((place_meeting(x+1,y,ob_wall_purple))or (place_meeting(x-1,y,ob_wall_purple))){
        vsp = key_jump * -jump_speed * pow_jump
        wall_jump -=1
    }
    
    //Wall jumping off of yellow as any colour
    else if ((place_meeting(x+1,y,ob_wall_yellow)) or (place_meeting(x-1,y,ob_wall_yellow))){
        vsp = key_jump * -jump_speed * pow_jump
        wall_jump -=1
    }   
}

                    //Jumping if you are touching a wall that is under you and beside you
                    
if (place_meeting(x + 1,y,ob_wall_green) or place_meeting(x - 1,y,ob_wall_green)) and place_meeting(x,y + 1,ob_wall_green) and (image_index == 0){
    wall_jump = jumps
}
else if (place_meeting(x + 1,y,ob_wall_white) or place_meeting(x - 1,y,ob_wall_white)) and place_meeting(x,y + 1,ob_wall_white) and (image_index == 1){
    wall_jump = jumps
}
else if (place_meeting(x + 1,y,ob_wall_blue) or place_meeting(x - 1,y,ob_wall_blue)) and place_meeting(x,y + 1,ob_wall_blue) and (image_index == 2){
    wall_jump = jumps
}
else if (place_meeting(x + 1,y,ob_wall_purple) or place_meeting(x - 1,y,ob_wall_purple)) and place_meeting(x,y + 1,ob_wall_purple){
    wall_jump = jumps
}
                    
                    
//Make the superjump only last one jump
if (key_jump == 1){pow_jump = 1}

                        //Collision
                    //Horizontal Collision

//Horizontal collision with green if you are green
if (place_meeting(x + hsp, y,ob_wall_green) and (image_index == 0)){
    while (!place_meeting(x + sign(hsp),y,ob_wall_green)){
        x += sign(hsp)
        }
    hsp = 0
    }
    
//Horizontal colliosion with white if you are white
else if (place_meeting(x + hsp, y,ob_wall_white) and (image_index == 1)){
    while (!place_meeting(x + sign(hsp),y,ob_wall_white)){
        x += sign(hsp)
        }
    hsp = 0
    }
    
//Horizontal colliosion with blue if you are blue
else if (place_meeting(x + hsp, y,ob_wall_blue) and (image_index == 2)){
    while (!place_meeting(x + sign(hsp),y,ob_wall_blue)){
        x += sign(hsp)
        }
    hsp = 0
    }

//Horizontal collision with purple for all colours
else if (place_meeting(x + hsp, y,ob_wall_purple)){
    while (!place_meeting(x + sign(hsp),y,ob_wall_purple)){
        x += sign(hsp)
        }
    hsp = 0
    }
    
x += hsp

                    //Vertical Collision

//Vertical collisioon with green if you are green
if (place_meeting(x,y + vsp,ob_wall_green) and (image_index == 0)){
    while (!place_meeting(x,y + sign(vsp),ob_wall_green)){
        y += sign(vsp)
        }
    vsp = 0
    }

//Vertical collision with white if you are white
else if (place_meeting(x,y + vsp,ob_wall_white) and (image_index == 1)){
    while (!place_meeting(x,y + sign(vsp),ob_wall_white)){
        y += sign(vsp)
        }
    vsp = 0
    
    }

//Vertical collisioon with blue if you are blue
else if (place_meeting(x,y + vsp,ob_wall_blue) and (image_index == 2)){
    while (!place_meeting(x,y + sign(vsp),ob_wall_blue)){
        y += sign(vsp)
        }
    vsp = 0
    
    }

//Vertical collision with purple walls as any colour
else if (place_meeting(x,y + vsp,ob_wall_purple)){
    while (!place_meeting(x,y + sign(vsp),ob_wall_purple)){
        y += sign(vsp)
        }
    vsp = 0
    
    }
    
y += vsp

                    //Hitting red blocks
if place_meeting(x,y,ob_wall_red) or place_meeting(x,y,ob_mwall_red){
// Add one to the total amount of restarts then restart the room   
    global.restarts += 1
    room_restart()
}

                        //Getting crushed by a moving block                        
                    //Crushed by a green moving block
if place_meeting(x,y - 1,ob_mwall_green) and (place_meeting(x,y + 1,ob_wall_purple) or place_meeting(x,y + 1,ob_wall_green)) and (image_index == 0){
    global.restarts += 1
    room_restart()
}

else if place_meeting(x,y - 1,ob_mwall_white) and (place_meeting(x,y + 1,ob_wall_purple) or place_meeting(x,y + 1,ob_wall_white)) and (image_index == 1){
    global.restarts += 1
    room_restart()
}
else if place_meeting(x,y - 1,ob_mwall_blue) and (place_meeting(x,y + 1,ob_wall_purple) or place_meeting(x,y + 1,ob_wall_blue)) and (image_index == 2){
    global.restarts += 1
    room_restart()
}







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Powerups and Changing colours

                        //Changing colours
                    //changing to green
if keyboard_check(ord("Z")) and place_empty(x,y) and (image_index != 0){
    image_index = 0
    instance_create(x,y,ob_part_test)
    }
                    //changing to white
else if keyboard_check(ord("X")) and place_empty(x,y) and (image_index != 1){
    image_index = 1
    instance_create(x,y,ob_part_test)
    }
                    //changing to blue
else if keyboard_check(ord("C")) and place_empty(x,y) and (image_index != 2){
    image_index = 2
    instance_create(x,y,ob_part_test)
    }
    
                        //PowerUps
//If you touch a jump powerup you get one more wall jump
if place_meeting(x,y,ob_pow_jump){
    jumps += 1
    wall_jump += 1
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
